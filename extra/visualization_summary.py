#!/usr/bin/env python3
"""
AXIOM Model Visualization Summary

This script provides a comprehensive summary of all generated visualizations
in the extra/visualizations/ directory.
"""

import json
from pathlib import Path

def display_visualization_summary():
    """Display a comprehensive summary of all generated visualizations."""
    print("üéâ AXIOM MODEL VISUALIZATION SYSTEM - FINAL SUMMARY")
    print("=" * 70)

    vis_dir = Path(__file__).parent / "visualizations" / "static"
    summary_file = vis_dir / "comprehensive_visualization_summary.json"

    if not summary_file.exists():
        print("‚ùå Summary file not found. Please run the visualization generation first.")
        return

    # Load summary data
    with open(summary_file, 'r') as f:
        summary = json.load(f)

    print("üìä OVERVIEW:")
    print(f"   ‚Ä¢ Total visualization files: {summary['total_visualizations']}")
    print(f"   ‚Ä¢ Successfully generated: {summary['successful_files']}")
    print(f"   ‚Ä¢ Failed: {summary['failed_files']}")
    print(f"   ‚Ä¢ Output directory: {summary['output_directory']}")

    print("\nüìã MODEL TYPES COVERED:")
    for model in summary['model_types_covered']:
        print(f"   ‚Ä¢ {model}")

    print("\nüîç GENERATED VISUALIZATION FILES:")

    # Group files by type
    architecture_files = []
    evolution_files = []
    overview_files = []
    other_files = []

    for name, path in summary['visualizations'].items():
        if path is None:
            continue
        if 'architecture' in name and 'all' not in name:
            architecture_files.append((name, path))
        elif 'evolution' in name:
            evolution_files.append((name, path))
        elif 'all' in name or 'abstract' in name:
            overview_files.append((name, path))
        else:
            other_files.append((name, path))

    print("   üèóÔ∏è  INDIVIDUAL MODEL ARCHITECTURES:")
    for name, path in architecture_files:
        filename = Path(path).name
        file_size = Path(path).stat().st_size
        model_name = name.replace('_architecture', '').upper()
        print(","
    print("   üìà STATE SPACE EVOLUTION:")
    for name, path in evolution_files:
        filename = Path(path).name
        file_size = Path(path).stat().st_size
        model_name = name.replace('_evolution', '').replace('_state', '').upper()
        print(","
    print("   üé® COMPREHENSIVE OVERVIEWS:")
    for name, path in overview_files:
        filename = Path(path).name
        file_size = Path(path).stat().st_size
        display_name = name.replace('_', ' ').title()
        print(","
    if other_files:
        print("   üìÑ OTHER FILES:")
        for name, path in other_files:
            filename = Path(path).name
            file_size = Path(path).stat().st_size
            print(","
    print("\nüìÅ DIRECTORY STRUCTURE:")
    print("   extra/visualizations/")
    print("   ‚îú‚îÄ‚îÄ static/                    # All visualization files")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ *_architecture.png     # Individual model architectures")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ *_evolution.png        # State space evolution diagrams")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ all_model_architectures.png    # Comprehensive overview")
    print("   ‚îÇ   ‚îú‚îÄ‚îÄ axiom_graphical_abstract.png   # System graphical abstract")
    print("   ‚îÇ   ‚îî‚îÄ‚îÄ comprehensive_visualization_summary.json")
    print("   ‚îú‚îÄ‚îÄ animations/                # For future animation outputs")
    print("   ‚îî‚îÄ‚îÄ dashboards/                # For future dashboard outputs")

    print("\nüí° VISUALIZATION CAPABILITIES:")
    print("   ‚Ä¢ Programmatic generation of high-quality PNG images")
    print("   ‚Ä¢ Individual model architecture diagrams")
    print("   ‚Ä¢ State space evolution over time")
    print("   ‚Ä¢ Inter-model relationship graphs")
    print("   ‚Ä¢ Comprehensive system overviews")
    print("   ‚Ä¢ Modular, reusable visualization components")
    print("   ‚Ä¢ Professional publication-quality outputs")

    print("\nüéØ MODEL VISUALIZATION METHODS AVAILABLE:")
    print("   ‚Ä¢ visualize_smm_architecture()        - SMM architecture")
    print("   ‚Ä¢ visualize_hsmm_architecture()       - HSMM architecture")
    print("   ‚Ä¢ visualize_imm_architecture()        - IMM architecture")
    print("   ‚Ä¢ visualize_rmm_architecture()        - RMM architecture")
    print("   ‚Ä¢ visualize_tmm_architecture()        - TMM architecture")
    print("   ‚Ä¢ visualize_hybrid_utils_architecture() - Hybrid utils")
    print("   ‚Ä¢ visualize_state_space_evolution()   - State evolution")
    print("   ‚Ä¢ visualize_model_relationships()     - Model relationships")
    print("   ‚Ä¢ visualize_all_model_architectures() - All architectures")
    print("   ‚Ä¢ create_graphical_abstract()         - Graphical abstract")

    print("\n‚úÖ MISSION ACCOMPLISHED!")
    print("All AXIOM model visualization methods have been successfully executed.")
    print("All outputs are available in the extra/visualizations/ directory as requested.")

    # Calculate total size
    total_size = sum(Path(path).stat().st_size for path in summary['visualizations'].values() if path)
    print(",.2f"
if __name__ == "__main__":
    display_visualization_summary()
